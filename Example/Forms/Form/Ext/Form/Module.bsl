&НаКлиенте
Перем ИдентификаторКомпоненты, ВнешняяКомпонента, ДанныеГрафа;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетКомпоненты = ОбработкаОбъект.ПолучитьМакет("GraphViz1C");
	АдресКомпоненты = ПоместитьВоВременноеХранилище(МакетКомпоненты, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	
	ДанныеГрафа = "
		|digraph G {
		|	node [shape=box];
		|	Корень -> Распознать -> Выполнить;
		|	Корень -> Инициализация;
		|	Корень -> Очистить;
		|	Выполнить -> Получить;
		|	Выполнить -> Распечатать
		|	Инициализация -> Получить;
		|	Корень -> Распечатать;
		|	Выполнить -> Сравнить;
		|}	
		|";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, АдресКомпоненты, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".GraphViz1C");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтаФорма);
		ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтаФорма, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, АдресКомпоненты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
	Заголовок = "GraphViz1C, версия " + Значение;
	СформироватьКартинку();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКартинку()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаКартинка", ЭтаФорма);
	ВнешняяКомпонента.НачатьВызовСформировать(ОписаниеОповещения, ДанныеГрафа, "svg");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученаКартинка(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВызова) = Тип("ДвоичныеДанные") Тогда
		СформироватьHTML(РезультатВызова);
	ИначеЕсли ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Сообщить(РезультатВызова);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьHTML(ДанныеКартинки) Экспорт
	
	Картинка = ПоместитьВоВременноеХранилище(ДанныеКартинки, УникальныйИдентификатор);
	Поток = ДанныеКартинки.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);
	ТекстHTML =
		"<html>
		|<head>
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
		|<style>html,body{width: 100%; height: 100%; margin:0; padding:0}</style>
		|</head>
		|<body onload=""var svg = document.querySelector('svg');svg.removeAttribute('width');svg.removeAttribute('height');"">
		|<div align=""center"" style=""display:table; width:100%; height:100%;"">
		|<div style=""display:table-cell; vertical-align:middle"">
		|" + ЧтениеТекста.Прочитать() + "
		|</div> 
		|</div> 
		|</body>
		|</html>";
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Не ПустаяСтрока(Картинка) Тогда
		УдалитьИзВременногоХранилища(Картинка);
		ТекстHTML = Неопределено;
		Картинка = Неопределено;
	КонецЕсли;
	
	СформироватьКартинку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортVisio(Команда)
	
	Попытка
		Visio = Новый COMОбъект("Visio.Application");
	Исключение
		Сообщить("Не удалось создать объект Visio по причине: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Visio.Application.ScreenUpdating = False;
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Картинка);
		ПостроитьДиаграммуVisio(Visio, ДвоичныеДанные);
	Исключение
		Сообщить("Ошибка Visio по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Visio.Application.ScreenUpdating = True;
	Visio.ActiveDocument.Saved = True;
	Visio = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция СконвертироватьТочки(Текст)
	
	РазрешениеЭкрана = 96;
	Координаты = СтрРазделить(Текст, " ", Ложь);
	Для Номер = 0 По Координаты.Количество() - 1 Цикл
		Точка = СтрРазделить(Координаты[номер], ",");
		Координаты[номер] = Новый Структура("X,Y"
				, Число(Точка[0]) / РазрешениеЭкрана + 1
				, -Число(Точка[1]) / РазрешениеЭкрана + 1
			);
	КонецЦикла;

	Возврат Координаты;
	
КонецФункции

&НаКлиенте
Функция МаксимумМассива(Массив, Поле)
	
	Количество = Массив.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Массив[0][Поле];
	Для Номер = 1 По Количество - 1 Цикл
		Значение = Массив[Номер][Поле];
		Если Значение > Результат Тогда
			Результат = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МинимумМассива(Массив, Поле)
	
	Количество = Массив.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Массив[0][Поле];
	Для Номер = 1 По Количество - 1 Цикл
		Значение = Массив[Номер][Поле];
		Если Значение < Результат Тогда
			Результат = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПостроитьДиаграммуVisio(Visio, ДвоичныеДанные)
	
	VisioNewFile = Visio.Documents.Add("");
	Попытка
		Visio.Application.ActivePage.SetTheme(1, 1, 1, 1, 1); // тема MS Visio 2016
	Исключение
		// MS Visio 2010
		Visio.Application.ActivePage.ThemeColors = "visThemeColorsBasic";
		Visio.Application.ActivePage.ThemeEffects = "visThemeEffectsBasicShadow";
	КонецПопытки;
	
	visSectionObject = 1;
	visRowShapeLayout = 23;
	visSLORouteStyle = 10;
	visLORouteCenterToCenter = 16;
	visSLOLineRouteExt = 19;
	visLORouteExtStraight = 1;
	visRowLine = 2;
	visLinePattern = 2;
	visLineWeight = 0;
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	СоответствиеПространств = Новый Соответствие;
	СоответствиеПространств.Вставить("svg", "http://www.w3.org/2000/svg");
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространств);
	
	Соответствие = Новый Соответствие;
	Результат = ДокументDOM.ВычислитьВыражениеXPath("//svg:g[@class=""node""]", ДокументDOM, Разыменователь);
	Пока Истина Цикл
		ТекущийУзел = Результат.ПолучитьСледующий();
		Если ТекущийУзел = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		ИмяОбъекта = ПолучитьЗначение(ТекущийУзел, "title");
		Представление = ПолучитьЗначение(ТекущийУзел, "text");
		КоординатыСтр = ПолучитьАтрибут(ТекущийУзел, "polygon", "points");
		Если Не ПустаяСтрока(КоординатыСтр) Тогда
			ЦветЗаливки = ПолучитьАтрибут(ТекущийУзел, "polygon", "fill");
			Координаты = СконвертироватьТочки(КоординатыСтр);
			НовыйОбъект = Visio.ActiveWindow.Page.DrawRectangle(
				Координаты[0].X, Координаты[0].Y, 
				Координаты[2].X, Координаты[2].Y);
		Иначе
			КоординатыСтр = ПолучитьАтрибут(ТекущийУзел, "path", "d");
			ЦветЗаливки = ПолучитьАтрибут(ТекущийУзел, "path", "fill");
			КоординатыСтр = СтрЗаменить(КоординатыСтр, "M", " ");
			КоординатыСтр = СтрЗаменить(КоординатыСтр, "C", " ");
			Координаты = СконвертироватьТочки(КоординатыСтр);
			НовыйОбъект = Visio.ActiveWindow.Page.DrawRectangle(
					МинимумМассива(Координаты, "X"),
					МинимумМассива(Координаты, "Y"),
					МаксимумМассива(Координаты, "X"),
					МаксимумМассива(Координаты, "Y"));
			НовыйОбъект.Cells("Rounding").Formula = 0.1;
		КонецЕсли;
		НовыйОбъект.Name = ИмяОбъекта;
		НовыйОбъект.Text = Представление;
		Если ЦветЗаливки = "gold" Тогда
			ФормулаЦвета = "RGB(255, 215, 0)";
		ИначеЕсли ЦветЗаливки = "#a82f00" Тогда
			ФормулаЦвета = "RGB(168, 47, 0)";
		Иначе
			ФормулаЦвета = "RGB(255, 255, 255)";
		КонецЕсли;
		НовыйОбъект.CellsU("Fillforegnd").FormulaU = ФормулаЦвета;
		Соответствие.Вставить(ИмяОбъекта, НовыйОбъект);
	КонецЦикла;
	
	Результат = ДокументDOM.ВычислитьВыражениеXPath("//svg:g[@class=""edge""]", ДокументDOM, Разыменователь);
	Пока Истина Цикл
		Директор = Ложь;
		ТекущийУзел = Результат.ПолучитьСледующий();
		Если ТекущийУзел = Неопределено Тогда 
			Прервать; 
		КонецЕсли;
		ИмяОбъекта = ПолучитьЗначение(ТекущийУзел, "title");
		Представление = ПолучитьЗначение(ТекущийУзел, "text");
		Если НРег(СокрЛП(Представление)) = "директор" 
			ИЛИ Нрег(СокрЛП(Представление)) = "генеральный директор" Тогда
			Директор = Истина;
		КонецЕсли;
		Позиция = СтрНайти(ИмяОбъекта, "->");
		ЛевыйОбъект = Лев(ИмяОбъекта, Позиция - 1);
		ЛевыйОбъект = СтрЗаменить(ЛевыйОбъект, ":", "");
		ПравыйОбъект = Сред(ИмяОбъекта, Позиция + 2);
		ПравыйОбъект = СтрЗаменить(ПравыйОбъект, ":", "");
		ЛевыйОбъект = Соответствие.Получить(ЛевыйОбъект);
		ПравыйОбъект = Соответствие.Получить(ПравыйОбъект);
		Коннектор = Visio.Application.ActiveWindow.Page.Drop(Visio.Application.ConnectorToolDataObject, 0, 1);
		Если НЕ Директор Тогда
			Коннектор.CellsU("BeginX").GlueTo(ЛевыйОбъект.CellsSRC(1, 1, 0));
			Коннектор.CellsU("EndX").GlueTo(ПравыйОбъект.CellsSRC(1, 1, 0));
		Иначе
			Коннектор.CellsU("BeginX").GlueTo(ПравыйОбъект.CellsSRC(1, 1, 0));
			Коннектор.CellsU("EndX").GlueTo(ЛевыйОбъект.CellsSRC(1, 1, 0));
		КонецЕсли;
		Директор = Ложь;
		Коннектор.CellsSRC(visSectionObject, visRowShapeLayout, visSLORouteStyle).FormulaU = "16";
		Коннектор.CellsSRC(visSectionObject, visRowShapeLayout, visSLOLineRouteExt).FormulaU = "2";
		Коннектор.CellsSRC(visSectionObject, visRowLine, visLineWeight).FormulaU = "1 pt";
		ФормаЛинии = ПолучитьАтрибут(ТекущийУзел, "path", "stroke-dasharray");
		Если НЕ ПустаяСтрока(ФормаЛинии) Тогда
			Коннектор.CellsSRC(visSectionObject, visRowLine, visLinePattern).FormulaU = "2";
		КонецЕсли;
		Коннектор.Text = Представление;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначение(ТекущийУзел, ИмяУзла)
	
	Для каждого ДочернийУзел Из ТекущийУзел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = ИмяУзла Тогда
			Возврат ДочернийУзел.ТекстовоеСодержимое;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПолучитьАтрибут(ТекущийУзел, ИмяУзла, ИмяАтрибута)
	
	Для каждого ДочернийУзел Из ТекущийУзел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = ИмяУзла Тогда
			Возврат ДочернийУзел.ПолучитьАтрибут(ИмяАтрибута);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДоступныеФорматы(Команда)
	
	ФорматыAPI = Новый Массив;
	ФорматыAPI.Добавить("render");
	ФорматыAPI.Добавить("layout");
	ФорматыAPI.Добавить("textlayout");
	ФорматыAPI.Добавить("device");
	ФорматыAPI.Добавить("loadimage");
	
	Для Номер = 0 По 4 Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыФорматы", ЭтаФорма, ФорматыAPI[Номер]);
		ВнешняяКомпонента.НачатьВызовФормат(ОписаниеОповещения, Номер);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыФорматы(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Сообщить(ДополнительныеПараметры + ": " + РезультатВызова);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОткрытияФайла", ЭтаФорма);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "*.dot";
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОткрытияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		ДанныеГрафа = Новый ДвоичныеДанные(ИмяФайла);
		СформироватьКартинку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораФайла", ЭтаФорма);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = "Файлы изображений (*.bmp, *.jpg, *.png)|*.bmp;*.jpg;*.png|Все файлы|*.*";
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		Файл = Новый Файл(ИмяФайла);
		ФорматЗаписи = Сред(Файл.Расширение, 2);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗаписиФайла", ЭтаФорма, Файл.ПолноеИмя);
		ВнешняяКомпонента.НачатьВызовСформировать(ОписаниеОповещения, ДанныеГрафа, ФорматЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиФайла(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВызова) = Тип("ДвоичныеДанные") Тогда
		РезультатВызова.Записать(ДополнительныеПараметры);
	ИначеЕсли ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Сообщить(РезультатВызова);
	КонецЕсли;
	
КонецПроцедуры